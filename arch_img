#!/bin/zsh
#Inspired by https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer.sh
set -e

write_file() {
	local file=$1
	echo "- Writing $file"
	cat >$file
}

prepare_subvolume() {
	#btrfs subvolume
	rootfs="/var/lib/machines/$name"
	[[ -e $rootfs ]] && exit 1
	btrfs subvolume create $rootfs
}

prepare_raw() {
	#raw image
	raw="/var/lib/machines/$name.raw"
	[[ -e $raw ]] && exit 1
	fallocate -l 1G $raw #dd of=archlinux.raw bs=1 seek=1G count=0
	chattr +C $raw
	DISK=$(losetup -f --show $raw)
	[[ -z $DISK ]] && exit 1
	BOOTPARTLABEL='boot' SLASHPARTLABEL='slash'
	sgdisk -n 1:0:+100M -c "0:$BOOTPARTLABEL" -t '0:ef00' --attributes=1:set:2  -n 2:0:0 -c "0:$SLASHPARTLABEL" -t '0:8304' $DISK
	partprobe $DISK #tells the kernel about the partitions
	mkfs.vfat ${DISK}p1
	mkfs.ext4 ${DISK}p2
	rootfs="/mnt/loop"
	mkdir -p $rootfs && mount ${DISK}p2 $rootfs
	mkdir -p $rootfs/boot && mount ${DISK}p1 $rootfs/boot
}

prepare() {
	echo "# Prepare"
	case $machine_type in
		btrfs)
			prepare_subvolume
			;;
		raw)
			prepare_raw
			;;
	esac
}

init() {
	echo "# Init"
	#trick: install 'linux' after /etc/mkinitcpio.conf, so that there is no need to call mkinitcpio -p linux again
	base_pkgs=($(ruby -e 'puts (%x/pacman -Sqg base/.split("\n")-%w(mdadm lvm2 cryptsetup device-mapper xfsprogs reiserfsprogs jfsutils man-pages man-db pcmciautils inetutils dhcpcd netctl s-nail licenses texinfo linux)).join(" ")'))
	pkgs=($base_pkgs openssh sudo)
	pacstrap -cd $rootfs --needed $pkgs
}

enable_networkd() {
	ln -snf /run/systemd/resolve/resolv.conf $rootfs/etc/
	sed -i -e 's/^hosts:.*/hosts: files mymachines resolve myhostname/' $rootfs/etc/nsswitch.conf
	write_file $rootfs/etc/systemd/network/30-dhcp.network <<EOS
[Match]
Name=en*
[Network]
DHCP=yes
IPForward=yes
EOS
}

configure() {
	echo "# Configure"
	systemd-firstboot --root=$rootfs --hostname=$name
	systemctl --root=$rootfs preset-all
	enable_networkd
	systemctl --root=$rootfs enable sshd.socket
	[[ -n $ssh_key ]] && mkdir -p $rootfs/root/.ssh && install -m 600 $ssh_key $rootfs/root/.ssh/authorized_keys
}

write_mkinitcpio() {
	#unfortunately the 'autodetect' mkinitcpio hooks use the modules from the host rather than the ones from the container [since it has not booted yet], so we need to use the fallback initramfs to boot the vm the first time
	write_file $rootfs/etc/mkinitcpio.conf <<EOS
HOOKS="systemd autodetect modconf block filesystems fsck"
EOS
}

write_systemd_boot() {
	write_file $rootfs/boot/loader/loader.conf <<EOS
default arch_fallback
EOS
	read MACHINE_ID < /etc/machine-id
	cmdline="rw" #use autodection to find slash
	write_file $rootfs/boot/loader/entries/arch.conf <<EOS
title Arch Linux
version current
machine-id $MACHINE_ID
linux /vmlinuz-linux
initrd /initramfs-linux.img
options $cmdline
EOS
	write_file $rootfs/boot/loader/entries/arch_fallback.conf <<EOS
title Arch Linux
version fallback
machine-id $MACHINE_ID
linux /vmlinuz-linux
initrd /initramfs-linux-fallback.img
options $cmdline
EOS
}

prepare_boot() {
	echo "# Boot"
	arch-chroot $rootfs bootctl install --no-variables
	pacstrap -GMcd $rootfs --needed linux
	write_mkinitcpio
	write_systemd_boot
	arch-chroot $rootfs mkinitcpio -p linux
	#Use kernel-install:
	#echo rw > $rootfs/etc/kernel/cmdline	
	##systemd-nspawn -D $rootfs sh -c 'kernel-install add $(uname -r) /boot/vmlinuz-linux'
}

cleanup() {
	set +e;
	echo "# Cleanup"
	case $machine_type in
		raw)
			#unmount
			if [[ -n $rootfs ]]; then
				umount $rootfs/boot; umount $rootfs
			fi
			[[ $DISK == /dev/loop* ]] && losetup -d $DISK
			;;
	esac
}

default_bootstrap() {
	prepare
	init
	configure
	[[ -n $boot ]] && prepare_boot
}

#allows other scripts to source arch_img and change bootstrap()
declare -f bootstrap >/dev/null || bootstrap() {
	default_bootstrap
}

trap '
  ret=$?;
  cleanup
  [[ $ret -ne 0 ]] && echo "FAILED TO GENERATE IMAGE" >&2
  exit $ret;
  ' EXIT
# clean up also after a SIGINT
trap 'exit 1;' SIGINT

while true;
do
  case $1 in
    -- ) break ;;
    -b|--boot ) shift; boot=t ;;
    -t|--type ) shift; machine_type=$1; shift ;;
    -k|--ssh-key ) shift; ssh_key=$1; shift ;;
    *) break;;
  esac
done

[[ -z $machine_type ]] && machine_type="btrfs"
name=$1; shift
if [[ $EUID != 0 ]]; then
	echo "Must be run as root"
	exit 1
fi
if [[ -z $name ]]; then
	echo "No name provided"
	exit 1
fi
if [[ $# > 0 ]]; then
	for func in $@; do
		eval $func
	done
else
	bootstrap
fi

#Build:
#sudo arch_img arch-container #container
#sudo arch_img -b -t raw arch-virtual #bootable raw disk for qemu

#systemd-nspawn:
#sudo machinectl start arch-container (-> sudo systemd-nspawn -bnM arch-container)
#sudo machinectl poweroff arch-container
#sudo machinectl remove arch-container

#qemu:
#qemu-system-x86_64 -m 256 -machine accel=kvm -bios /usr/share/ovmf/ovmf_x64.bin -drive format=raw,file=/var/lib/machines/arch-virtual.raw
